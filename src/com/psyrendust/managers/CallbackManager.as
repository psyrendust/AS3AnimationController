package com.psyrendust.managers{	import com.psyrendust.managers.types.CallbackManagerType;			import flash.utils.Dictionary;			/**	 * The CallbackManager class simplifies the management of adding callback functionality to your class.	 * 	 * @example Using CallbackManager within a class.	 * <listing>	 * import com.psyrendust.managers.CallbackManager;	 * import flash.display.MovieClip;	 * import flash.events.Event;	 * 	 * public class Main extends MovieClip	 * {	 *    private var cm:CallbackManager;	 *    public var mc:MovieClip;	 *    	 *    public function Main()	 *    {	 *       super();	 *       cm=new CallbackManager();	 *       cm.addListener(Event.ADDED_TO_STAGE,this,"addedToStageComplete");	 *       mc=new MovieClip();	 *       mc.graphics.beginFill(0xFF0066);	 *       mc.graphics.drawCircle(200,200,100);	 *       mc.graphics.endFill();	 *       mc.addEventListener(Event.ADDED_TO_STAGE,addedToStage);	 *       addChild(mc);	 *    }	 *    private function addedToStage(e:Event):void	 *    {	 *       cm.callListeners(Event.ADDED_TO_STAGE, "Hello World");	 *    }	 *    public function addedToStageComplete(m:String):void	 *    {	 *       trace("Added To Stage Complete: " + m);	 *    }	 * }	 * </listing>	 * @author lgordon@psyrendust.com	 */	public class CallbackManager 	{		private var _version:String="1.0.0";		private var _listeners:Array;		private var _listenersIndex:Dictionary;		public function CallbackManager()		{			trace("--\\\\\\ com.psyrendust.managers.CallbackManager ver" + _version + " ///--");		}		/**		 * Add a listener to this CallbackManager object.		 * 		 * @param type The type of event to be added.		 * @param callbackDelegate The scope that contains the callback function.		 * @param callbackFunction The name of the function that gets called by the event.		 */		public function addListener(type:String, callbackDelegate:*, callbackFunction:String):void		{			if(typeof callbackDelegate[callbackFunction] != "function") return; 			if(!_listeners) _listeners=new Array();			if(!_listenersIndex) _listenersIndex=new Dictionary();			if(!_listenersIndex[type]) _listenersIndex[type]= new Array();			_listeners.push(new CallbackManagerType(type, callbackDelegate, callbackFunction));			_listenersIndex[type].push(_listeners.length-1);		}		/**		 * Remove a listener from this CallbackManager object. 		 * If there are no matching listeners registered with 		 * the CallbackManager object, a call to this method 		 * has no effect.		 * 		 * @param type The type of event to be removed.		 * @param callbackDelegate The scope that contains the callback function.		 * @param callbackFunction The name of the function to be removed.		 */		public function removeListener(type:String, callbackDelegate:*, callbackFunction:String):void		{			if(_listenersIndex[type])			{				var ary:Array = _listenersIndex[type];				var l:int = ary.length;				for(var i:int=0;i<l;i++)				{					var acListenerParams:CallbackManagerType = _listeners[ary[i]];					if(acListenerParams.callbackDelegate==callbackDelegate && acListenerParams.callbackFunction==callbackFunction)					{						_listeners.splice(ary[i],1);						_listenersIndex[type].splice(i,1);						break;					}				}			}		}		/**		 * Remove all listeners from this CallbackManager object.		 */		public function removeListeners():void		{			_listeners=null;			_listenersIndex=null;		}		/**		 * Call all listener functions filtered by type.		 * If there are no matching listeners registered 		 * with the CallbackManager object, a call to 		 * this method has no effect.		 * 		 * <p>If type is <code>null</code> then all registered listeners will be called.</p>		 * 		 * @param type The type of event.		 * @param params A parameter that is passed to the callback function.		 */		public function callListeners(type:String=null, params:*=null):void		{			if(_listeners==null) return;			var l:int = _listeners.length;			for(var i:int=0;i<l;i++)			{				var acListenerParams:CallbackManagerType = _listeners[i];				var callee:* = acListenerParams.callbackDelegate;				var functionName:String = acListenerParams.callbackFunction;				if(type==null || acListenerParams.type==type)				{					if(params==null) callee[functionName]();					else callee[functionName](params);				}			}		}		/**		 * Dispose of this CallbackManager.		 */		public function dispose():void		{			removeListeners();		}	}}